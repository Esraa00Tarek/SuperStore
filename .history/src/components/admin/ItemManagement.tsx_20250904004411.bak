import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Edit, Trash2, Plus } from 'lucide-react';
import { useLanguage } from '@/contexts/LanguageContext';

export interface Item {
  id: string | number;
  name: string;
  nameAr: string;
  price: string;
  category: string;
  madeBy: string;
  descriptionEn: string;
  descriptionAr: string;
  image: string;
  rating: number;
  createdAt?: string;
  updatedAt?: string;
}

interface ItemManagementProps {
  items: Item[];
  onSave: (item: Item) => void;
  onDelete: (id: string | number) => void;
  title: string;
  categories?: string[];
}

export interface Item {
  id: string | number;
  name: string;
  nameAr: string; // Arabic name
  price: string;
  category: string;
  madeBy: string;
  descriptionEn: string; // English description
  descriptionAr: string; // Arabic description
  image: string;
  rating: number;
  createdAt?: string;
  updatedAt?: string;
}

interface ItemManagementProps {
  items: Item[];
  onSave: (item: Item) => void;
  onDelete: (id: string | number) => void;
  title: string;
  categories?: string[];
}

export function ItemManagement({ items, onSave, onDelete, title, categories = [] }: ItemManagementProps) {
  const { t } = useLanguage();
  const [isEditing, setIsEditing] = useState<boolean>(false);
  const [currentItem, setCurrentItem] = useState<Partial<Item> | null>(null);
  const [isNewItem, setIsNewItem] = useState<boolean>(false);

  const handleEdit = (item: Item) => {
    setCurrentItem({ ...item });
    setIsEditing(true);
    setIsNewItem(false);
  };

  const handleAddNew = () => {
    setCurrentItem({
      id: Date.now(),
      name: '',
      nameAr: '',
      price: '',
      category: categories[0] || '',
      madeBy: '',
      descriptionEn: '',
      descriptionAr: '',
      image: '',
      rating: 0,
      createdAt: new Date().toISOString().split('T')[0],
      updatedAt: new Date().toISOString().split('T')[0]
    });
    setIsEditing(true);
    setIsNewItem(true);
  };

  const handleSave = () => {
    if (currentItem?.name && currentItem?.nameAr && currentItem?.price && currentItem?.category) {
      const now = new Date().toISOString().split('T')[0];
      const itemToSave = {
        ...currentItem,
        updatedAt: now,
        createdAt: currentItem.createdAt || now,
        rating: currentItem.rating || 0
      };
      onSave(itemToSave as Item);
      setIsEditing(false);
      setCurrentItem(null);
    }
  };

  const handleDelete = (id: string | number) => {
  if (window.confirm(t('confirmDelete') || 'Are you sure you want to delete this item?')) {
      onDelete(id);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setCurrentItem(prev => ({
      ...prev!,
      [name]: value
    }));
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold">{title}</h2>
        <Button onClick={handleAddNew} className="flex items-center gap-2">
          <Plus className="w-4 h-4" />
          {t('addNew') || 'Add New'}
        </Button>
      </div>

      {isEditing && currentItem && (
        <Card className="mb-6">
          <CardHeader>
            <CardTitle>{isNewItem ? (t('addNew') || 'Add New') : (t('edit') || 'Edit')}</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {/* English Name */}
              <div className="space-y-2">
                <Label htmlFor="name">{t('nameEn') || 'Name (English)'}</Label>
                <Input
                  id="name"
                  name="name"
                  value={currentItem.name || ''}
                  onChange={handleChange}
                  required
                />
              </div>

              {/* Arabic Name */}
              <div className="space-y-2">
                <Label htmlFor="nameAr">{t('nameAr') || 'Name (Arabic)'}</Label>
                <Input
                  id="nameAr"
                  name="nameAr"
                  value={currentItem.nameAr || ''}
                  onChange={handleChange}
                  required
                  dir="rtl"
                />
              </div>

              {/* Price */}
              <div className="space-y-2">
                <Label htmlFor="price">{t('price') || 'Price'}</Label>
                <Input
                  id="price"
                  name="price"
                  type="text"
                  value={currentItem.price || ''}
                  onChange={handleChange}
                  required
                />
              </div>

              {/* Category */}
              {categories.length > 0 && (
                <div className="space-y-2">
                  <Label htmlFor="category">{t('category') || 'Category'}</Label>
                  <select
                    id="category"
                    name="category"
                    value={currentItem.category || ''}
                    onChange={handleChange}
                    className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                    required
                  >
                    <option value="">{t('selectCategory') || 'Select Category'}</option>
                    {categories.map((cat) => (
                      <option key={cat} value={cat}>
                        {cat}
                      </option>
                    ))}
                  </select>
                </div>
              )}

              {/* Made By */}
              <div className="space-y-2">
                <Label htmlFor="madeBy">{t('madeBy') || 'Made By'}</Label>
                <Input
                  id="madeBy"
                  name="madeBy"
                  value={currentItem.madeBy || ''}
                  onChange={handleChange}
                  required
                />
              </div>

              {/* Rating */}
              <div className="space-y-2">
                <Label htmlFor="rating">{t('rating') || 'Rating (0-5)'}</Label>
                <Input
                  id="rating"
                  name="rating"
                  type="number"
                  min="0"
                  max="5"
                  step="0.1"
                  value={currentItem.rating || ''}
                  onChange={handleChange}
                />
              </div>

              {/* Image URL */}
              <div className="space-y-2">
                <Label htmlFor="image">{t('imageUrl') || 'Image URL'}</Label>
                <Input
                  id="image"
                  name="image"
                  type="text"
                  value={currentItem.image || ''}
                  onChange={handleChange}
                />
                {currentItem.image && (
                  <div className="mt-2">
                    <img 
                      src={currentItem.image} 
                      alt="Preview" 
                      className="h-20 w-20 object-cover rounded-md border"
                    />
                  </div>
                )}
              </div>

              {/* English Description */}
              <div className="space-y-2 md:col-span-2">
                <Label htmlFor="descriptionEn">{t('descriptionEn') || 'Description (English)'}</Label>
                <Textarea
                  id="descriptionEn"
                  name="descriptionEn"
                  value={currentItem.descriptionEn || ''}
                  onChange={handleChange}
                  rows={3}
                  required
                />
              </div>

              {/* Arabic Description */}
              <div className="space-y-2 md:col-span-2">
                <Label htmlFor="descriptionAr">{t('descriptionAr') || 'Description (Arabic)'}</Label>
                <Textarea
                  id="descriptionAr"
                  name="descriptionAr"
                  value={currentItem.descriptionAr || ''}
                  onChange={handleChange}
                  rows={3}
                  dir="rtl"
                  required
                />
              </div>
            </div>

            <div className="flex justify-end space-x-2 pt-4 border-t">
              <Button
                type="button"
                variant="outline"
                onClick={() => {
                  setIsEditing(false);
                  setCurrentItem(null);
                }}
              >
                {t('common.cancel') || 'Cancel'}
              </Button>
              <Button type="button" onClick={handleSave}>
                {t('common.save') || 'Save'}
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      <Card>
        <div className="rounded-md border overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-16">{t('image') || 'Image'}</TableHead>
              <TableHead>{t('name') || 'Name'}</TableHead>
              <TableHead>{t('madeBy') || 'Made By'}</TableHead>
              <TableHead className="w-24">{t('price') || 'Price'}</TableHead>
              <TableHead className="w-32">{t('rating') || 'Rating'}</TableHead>
              <TableHead className="w-32">{t('category') || 'Category'}</TableHead>
              <TableHead className="text-right w-24">{t('common.actions') || 'Actions'}</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {items.length > 0 ? (
              items.map((item) => (
                <TableRow key={item.id} className="hover:bg-gray-50 dark:hover:bg-gray-800">
                  <TableCell>
                    {item.image ? (
                      <img
                        src={item.image}
                        alt={item.name}
                        className="h-10 w-10 rounded-md object-cover"
                        onError={(e) => {
                          const target = e.target as HTMLImageElement;
                          target.onerror = null;
                          target.src = '/placeholder-food.jpg';
                        }}
                      />
                    ) : (
                      <div className="h-10 w-10 rounded-md bg-gray-100 dark:bg-gray-700 flex items-center justify-center">
                        <span className="text-xs text-gray-500 dark:text-gray-400">No Image</span>
                      </div>
                    )}
                  </TableCell>
                  <TableCell className="font-medium">
                    <div className="flex flex-col">
                      <span>{item.name}</span>
                      <span className="text-xs text-gray-500 dark:text-gray-400" dir="rtl">
                        {item.nameAr}
                      </span>
                    </div>
                  </TableCell>
                  <TableCell>{item.madeBy}</TableCell>
                  <TableCell className="font-medium">{item.price}</TableCell>
                  <TableCell>
                    <div className="flex items-center">
                      <span className="text-yellow-500 mr-1">★</span>
                      <span>{item.rating?.toFixed(1) || 'N/A'}</span>
                    </div>
                  </TableCell>
                  <TableCell>
                    <span className="px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded-full text-xs">
                      {item.category}
                    </span>
                  </TableCell>
                  <TableCell className="text-right">
                    <div className="flex justify-end space-x-1 rtl:space-x-reverse">
                      <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => handleEdit(item)}
                        className="h-8 w-8"
                      >
                        <Edit className="h-3.5 w-3.5" />
                        <span className="sr-only">{t('common.edit') || 'Edit'}</span>
                      </Button>
                      <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => handleDelete(item.id)}
              <TableRow>
                <TableHead className="w-16">{t('image') || 'Image'}</TableHead>
                <TableHead>{t('name') || 'Name'}</TableHead>
                <TableHead>{t('madeBy') || 'Made By'}</TableHead>
                <TableHead className="w-24">{t('price') || 'Price'}</TableHead>
                <TableHead className="w-32">{t('rating') || 'Rating'}</TableHead>
                <TableHead className="w-32">{t('category') || 'Category'}</TableHead>
                <TableHead className="text-right w-24">{t('common.actions') || 'Actions'}</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {items.length > 0 ? (
                items.map((item) => (
                  <TableRow key={item.id} className="hover:bg-gray-50 dark:hover:bg-gray-800">
                    <TableCell>
                      {item.image ? (
                        <img
                          src={item.image}
                          alt={item.name}
                          className="h-10 w-10 rounded-md object-cover"
                          onError={(e) => {
                            const target = e.target as HTMLImageElement;
                            target.onerror = null;
                            target.src = '/placeholder-food.jpg';
                          }}
                        />
                      ) : (
                        <div className="h-10 w-10 rounded-md bg-gray-100 dark:bg-gray-700 flex items-center justify-center">
                          <span className="text-xs text-gray-500 dark:text-gray-400">No Image</span>
                        </div>
                      )}
                    </TableCell>
                    <TableCell className="font-medium">
                      <div className="flex flex-col">
                        <span>{item.name}</span>
                        <span className="text-xs text-gray-500 dark:text-gray-400" dir="rtl">
                          {item.nameAr}
                        </span>
                      </div>
                    </TableCell>
                    <TableCell>{item.madeBy}</TableCell>
                    <TableCell className="font-medium">{item.price}</TableCell>
                    <TableCell>
                      <div className="flex items-center">
                        <span className="text-yellow-500 mr-1">★</span>
                        <span>{item.rating?.toFixed(1) || 'N/A'}</span>
                      </div>
                    </TableCell>
                    <TableCell>
                      <span className="px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded-full text-xs">
                        {item.category}
                      </span>
                    </TableCell>
                    <TableCell className="text-right">
                      <div className="flex justify-end space-x-1 rtl:space-x-reverse">
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => handleEdit(item)}
                          className="h-8 w-8"
                        >
                          <Edit className="h-3.5 w-3.5" />
                          <span className="sr-only">{t('common.edit') || 'Edit'}</span>
                        </Button>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => handleDelete(item.id)}
                          className="h-8 w-8 text-red-500 hover:text-red-700"
                        >
                          <Trash2 className="h-3.5 w-3.5" />
                          <span className="sr-only">{t('common.delete') || 'Delete'}</span>
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={7} className="text-center py-8 text-gray-500">
                    {t('noItemsFound') || 'No items found. Click "Add New" to get started.'}
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      </Card>
    </div>
  );
};

export { ItemManagement };
export type { Item };
